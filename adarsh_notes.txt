Some setup notes:

1. Create virtual env
mkdir virtualenv
cd virtualenv/
sudo apt install virtualenv
virtualenv -p python py-keras
source py-keras/bin/activate

pip3 install -q -U pip setuptools wheel

2. Install Keras
pip3 install keras==2.0.8

3. Install tensorflow
pip3 install tensorflow==1.3

4. Install opencv
pip3 install opencv-python==4.2.0.32

5. install pydicom
pip3 install pydicom

6. install sklearn
pip3 install sklearn

7. install h5py
pip3 install h5py

8. set python path
export PYTHONPATH=$PYTHONPATH:/home/adarshsehgal/workspace/GA-mammograms

9. install pyspark for parallel ga computing
pip3 install pyspark

10. install jmetal
pip3 install "jmetalpy[distributed]"

11. install java
sudo apt install openjdk-8-jdk

cd workspace/GA-mammograms/ddsm_train/

=========================================================================================
Some IMPORTANT points:
1. MAIN SCRIPT FILE: train_image_clf_inbreast.sh
./train_image_clf_inbreast.sh

2. white_list_formats = {'png', 'jpg', 'jpeg', 'bmp'}
    only these format images can be used for train/test/val

3. train/test/val folders should have folders named 'neg' (meaning negative) and 'pos' (meaning positive)
    these are classes, names of which are inserted in variable name called '--class-list'

4. Inbreast dataset link
    https://drive.google.com/file/d/19n-p9p9C0eCQA1ybm6wkMo-bbeccT_62/view

5. Use inbreast_preprocess_script.py, to split the dicom images to positive/negative images based on Bi-Rads assessment categories
    Negative - 1/2
    Positive - 4/5/6

6. Use inbreast_preprocess_script.py to convert DICOM to PNG images

7. --batch-size should be changed based on number of images used for testing, default was set to 4
--all-layer-epochs controls how many epochs you want to run the training for

8. Use inbreastbuilder.m/inbreastbuilder.py with read_mixed_csv.m/read_mixed_csv.py files to process inbreast database
========================================================================================

How to run the code:
1. Activate virtual env
cd virtualenv/
source py-keras/bin/activate

2.  set python path
export PYTHONPATH=$PYTHONPATH:/home/adarsh/workspace/GA-mammograms

3. Go to code directory
cd && cd workspace/GA-mammograms/ddsm_train/

4. Execute the script
./train_image_clf_inbreast.sh


======================================================================================

STEPS TO PROGRAM GA-E2E ALGORITHM:

1. Preprocess Inbreast dataset
    - write matlab code to split positive and negative images
    - write python code to convert dicom to png format
2. install required packages for E2E
3. split preprocessed png images to train/val/test sub-sets
    - ALL are CC view images
    - ALL images belong to different patients

    train sub-set: 4 neg, 4 pos
    val sub-set: 2 neg, 2 pos
    test sub-set: 4 neg, 4 pos

4. Program ga.py to create a string of query to be run for fitness function
    - return of fitness function is AUC because we want to maximize AUC
    - consider AUC as the one from test set
    - Approx 160 s for each epoch
    - Total of 4 epochs per training - to save time
    - Approx 11 minutes per fitness function evaluation

5. Program to plot AUC vs times fitness function evaluated - plot_rewards.py
    - This will plot AUC on y axis, times fitness function evaluated on x axis.
    - This signifies overall increase in AUC over fitness function runs
    - Further signifying moving of search space in promising direction
    - plot, time taken to run over fitness function evaluations
=====================================================================================

EXPERIMENTS PERFORMED

1. pos/neg having multiple views of same patient
    -train/val AUC=1.0
    -test AUC=0.5
    -train sub-set: 4 neg, 4 pos
    -val sub-set: 2 neg, 2 pos
    -test sub-set: 4 neg, 4 pos
    -Training uses 4 epochs
    -num_cpu=4
    -160 s per epoch

2. pos/neg having only CC views of different patients
    -train sub-set: 4 neg, 4 pos
    -val sub-set: 2 neg, 2 pos
    -test sub-set: 4 neg, 4 pos
    -Training uses 4 epochs
    -For training, epoch 1/2 AUC 0.75, epoch3/4 AUC 1.0
    -test AUC=0.4375
    -num_cpu=4
    -160 s per epoch

3. pos/neg having only CC views of different patients
    -train sub-set: 4 neg, 4 pos
    -val sub-set: 2 neg, 2 pos
    -test sub-set: 4 neg, 4 pos
    -Training uses 4 epochs
    -init-learningrate 0.999
    -RESULT: change in init-learningrate, changes AUC

4. Running my old GA with 6 parameters
    - original AUC was 0.4375
    - GA found AUC 0.5
    - train sub-set: 4 neg, 4 pos
    - val sub-set: 2 neg, 2 pos
    - test sub-set: 4 neg, 4 pos
    - Training uses 4 epochs
    - NUM_GPU_CORE = 6
    - plot generated for AUC vs times fitness function evaluated
    - all parameters have ranges 0-0.999
    - Limited images due to system limitations
    - Code ran on ubuntu local machine
    - Google colab did not support tensorflow v1.3, which is needed to run the code

=====================================================================================

PARAMETERS FOR GA OPTIMIZATION:

-pos-cls-weight, range 0-1, 3 decimal places, default: 1.0
-neg-cls-weight, range 0-1, 3 decimal places, default: 1.0
-weight-decay, range 0-1, 3 decimal places, default: 0.001
-weight-decay2, range 0-1, 3 decimal places, default: 0.01

Best auc so far : 0.5625
BEST CHROMOSOME IS
[False False  True  True  True  True  True False False False  True  True
  True False  True False  True  True  True False False  True False  True
  True False False  True False False  True False False False  True  True
  True  True False  True False  True  True  True False False False False
  True False  True  True  True  True False  True False False False False
 False  True  True False  True False]
It's decoded value is
pos_cls_weight = 0.248
neg_cls_weight = 1.721
weight_decay = 0.804
weight_decay2 = 0.983
init_lr = 0.094
all_layer_multiplier = 0.026
--- 355461.121692 seconds ---


=================================================================================
-MIT jmetal implementation
https://github.com/jMetal/jMetalPy

-how to run jmetal in parallel
https://jmetal.github.io/jMetalPy/tutorials/evaluator.html
from jmetal.util.evaluator import MapEvaluator
from jmetal.util.evaluator import MultiprocessEvaluator
from jmetal.util.evaluator import SparkEvaluator

algorithm = NSGAII(
   problem=problem,
   population_size=100,
   offspring_population_size=100,
   ...
   population_evaluator = SparkEvaluator(processes=8),
 )

pip3 install pyspark

-how to install spark for parallel run
https://www.mytechmint.com/how-to-install-pyspark-with-java-8-on-ubuntu-18-04/

-Steps to setup workspace to run jMetal version of GA
1. create test/val folders in directory ddsm_train
2. update path in mammogram.py
3. create pos/neg folders in test/val folders
4. convert dicom images to png and save in pos/neg folders
5. create modelFiles folder in ddsm_train folder to save all model files


